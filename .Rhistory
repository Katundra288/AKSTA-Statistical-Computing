A1["r2",,]
A1[,"c2",]
A1["r2","c2",]
M2 <- matrix(7:12, ncol = 3, nrow = 2)
M2
combined_matrix <- cbind(M1, M2)
combined_matrix
M3 <- matrix(13:18, ncol = 3, nrow = 2)
M3
combined_matrix <- rbind(M1, M3)
combined_matrix
A2 <- array(25:36, dim = c(3, 4, 2))
combined_array <- abind(A1, A2, along = 3)
install.packages("abind")
library(abind)
combined_array <- abind(A1, A2, along = 3)
combined_array
A1
A2
dim(combined_array)
DF1 <- data.frame(V1 = 1:5,
V2 = c("a", "a", "b", "a", "d"))
str(DF1)
V1 <- 1:5
L1 <- list(V1 = V1, V2 = letters[c(1, 2, 3, 2, 1)])
L2 <- list(V1 = V1, V2 = letters[c(1, 2, 3, 2, 1, 3)])
str(as.data.frame(V1))
L1
L2
str(as.data.frame(V1))
as.data.frame(V1)
str(as.data.frame(M1))
M1
str(as.data.frame(L1))
as.data.frame(M1)
as.data.frame(L1)
as.data.frame(L2)
cbind(DF1, data.frame(new = 6:10))
rbind(DF1, data.frame(V1 = 1, V2 = "c"))
DF1
rbind(DF1, data.frame(1,"c"))
DF6 <- data.frame(a = 1:3, b = I(list(1:2,1:3,1:4)))
DF6
DF6 <- data.frame(a = 1:3, b = I(matrix(1:6, nrow = 3)))
DF6
DF6 <- data.frame(a = 1:3, b = I(list(1:2,1:3,1:4)))
DF6
DF6 <- data.frame(a = 1:3, b = I(matrix(1:6, nrow = 3)))
DF6
attributes(DF1)
DF1
library("tibble")
install.packages("tibble")
library("tibble")
DF1t <- tibble(V1 = 1:5,
V2 = c("a", "a", "b", "a", "d"))
attributes(DF1t)
attributes(DF1)
data.frame(x = 1:4, y = 1:2)
tibble(x = 1:4, y = 1)
tibble(
x = 1:3,
y = x * 2
)
L1 <- list(1:5, "a", c(TRUE, FALSE))
L1
lapply(L1, length)
df <- data.frame(Income = c(1000, 1100, 1200, 1300, 1400),
Age = c(20, 19, 54, 45, 24))
df
## Apply to columns
apply(df, 2, mean)
apply(df, 2, function(x) length(x))
df$Group <- factor(c("A", "B", "A", "A", "B"))
df
df[, 1:2]
df[, 2:3]
df[, c(1, 3)]
apply(df[, 1:2], 2, mean)
sapply(df, mean)
id_num <- sapply(df, is.numeric)
id_num
sapply(df[, id_num], mean)
sapply(L1, length) # returns a vector
sapply(L1, summary) # returns a list
tapply(df$Income, df$Group, mean)
df
summary(df)
V1 <- c(1, 3, 2.5, 7.2, -3.2)
V1[c(1, 3)]
V1[-c(2, 4, 5)]
V1[c(TRUE, FALSE, TRUE, FALSE, FALSE)]
names(V1) <- letters[1:5]
V1
V1[c("a", "c")]
V1[]
V1[0]
L1 <- list(a = 1:2, b = letters[1:3], c = c(TRUE, FALSE))
L1
L1[1]
L1[2]
L1[3]
L1[1]
L1[[1]]
L1$a
L1[1][1]
L1$a[1]
L2[[1]][[1]]
L2[[1]][1]
M1 <- matrix(1:6, ncol = 3)
rownames(M1) <- LETTERS[1:2]
colnames(M1) <- letters[1:3]
M1
M1[c(TRUE, FALSE), c("b", "c")]
M1[ ,c(1, 1, 2)]
M1[-2, ]
M2 <- outer(1:5, 1:5, paste, sep = ",")
M2
M2[c(3, 17)]
M3 <- matrix(ncol = 2, byrow = TRUE,
data = c(1, 4,
3, 3,
5, 1))
M3
M2[M3]
DF1 <- data.frame(a = 4:6, b = 7:5, c = letters[15:17])
DF1
DF1[DF1$a <= 5, ]
DF1[DF1$a <= 5, ]
DF1[c(1,3), ]
DF1[, c("a","c")]
DF1
DF1[c("a","c")]
DF1[, c("a","c")]
DF1[, "a"]
DF1["a"]
DF1$a
DF1$a[1]
DF1[, "a"][1]
DF1["a"][1]
DF1["a"][[1]]
df <- tibble::tibble(a = 4:6, b = 7:5, c = letters[15:17])
str(df["a"])
df
set.seed(1)
x <- runif(1:100)
y <- 3 + 0.5 * x + rnorm(100, sd = 0.1)
fit1 <- lm(y ~ x)
class(fit1)
str(fit1)
View(fit1)
fit1$coefficients[1]
fit1[["model"]][["y"]]
summary(fit1)
L2 <- list(a = list(A = list(aA = 1:3, bB = 4:6),
B = "this"),
b = "that")
str(L2)
L2[[c("a","A","aA")]]
L2[["a"]]
L2[["a"]][["A"]]
L2[["a"]][["A"]][["aA"]]
L2[[c("a","A","aA")]]
L2[["a"]][["A"]][["aA"]]
x <- 3
if (x < 5) {
print("'x' is smaller than 5")
} else if (x < 10) {
print("'x' is at least 5 but less than 10")
} else {
print("'x' is at least 10")
}
as.logical(0)
as.logical(0.1)
as.logical(10)
if (c(TRUE, FALSE)) 1
x <- 1:4
ifelse(x < 2.5, "yes", "no")
y <- c(1, 0, 1) # will be coerced to as.logical()
ifelse(y, "yes", "no")
x <- 1:4
names(x) <- c("x1", "x2", "x3", "x4")
ifelse(x < 2.5, "yes", "no") # keeps the names
x <- 1:4
x[3] <- NA
ifelse(x < 2.5, "yes", "no")
x <- "a"
switch(x,
a = "option 1",
b = "option 2",
c = "option 3",
stop("Invalid `x` value")
)
x <- "aa"
switch(x,
a = "option 1",
b = "option 2",
c = "option 3",
stop("Invalid `x` value")
)
switch("c", a = 1, b = 2, stop("Input not found"))
for (i in 1:3) print(i)
out <- numeric(3)
out
for (i in 1:3) {
out[i] <- i * 10 + 1
}
out
vector(3)
vector()
?vector
vector(length = 3)
vector(mode+"numeric", length = 3)
vector(mode="numeric", length = 3)
xs <- as.Date(c("2020-01-01", "2010-01-01"))
xs
for (x in xs) {
print(x)
}
out <- c()
for (i in seq_along(out)) {
print(i)
}
Fib1r <- 1
Fib2r <- 1
Fibsr <- c(Fib1r)
Fibsr
repeat {
Fibsr <- c(Fibsr, Fib2r)
oldFib2r <- Fib2r
Fib2r <- Fib1r + Fib2r
Fib1r <- oldFib2r
if (Fib2r > 100) break
}
Fibsr
f <- function(x, y = 1) {
z <- x + y
2 * z
}
f
formals(f)
body(f)
environment(f)
# Define a function
my_function <- function(y) {
# Define a non-function object 'x' within the function's environment
x <- 20
# Print the value of 'x' and 'y'
print(paste("x inside the function:", x))
print(paste("y inside the function:", y))
}
# Define 'x' in the global environment
x <- 10
# Call the function with 'x' as an argument
my_function(x)
y <- 10
f1 <- function(x) {
g <- function(x) {
x * y
}
y <- 2
yˆ2 + g(x)
}
f1(3)
y^2 + g(x)
y <- 10
f1 <- function(x) {
g <- function(x) {
x * y
}
y <- 2
y^2 + g(x)
}
f1(3)
y <- 10
f1 <- function(x) {
g <- function(x) {
print(y)
x * y
}
y <- 2
y^2 + g(x)
}
f1(3)
f2 <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x * y
}
f2 <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x * y
}
f2(3)
f2 <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
print(y)
x * y
}
f2(3)
f <- function(Position1, Pos2, Pos3) {
list(pos1 = Position1, pos2 = Pos2, pos3 = Pos3)
}
str(f(Position1 = 1, Pos2 = 2, Pos3 = 3))
f(Position1 = 1, Pos2 = 2, Pos3 = 3)
f(Position1 = 1, Pos2 = 2, Pos3 = 3)[[1]]
f(Position1 = 1, Pos2 = 2, Pos3 = 3)$pos1
setwd("D:/OneDrive - TU Wien/Semester 2/105.731 AKSTA Statistical Computing/Case studies _ homework assignments/AKSTA-Statistical-Computing")
getwd()
rank(c(10, 5, 8, 12, 8))
knitr::opts_chunk$set(echo = TRUE)
Return the list (RVAL)
kwtest <- function (x, g, ...)
{
if (is.list(x)) {
if (length(x) < 2L)
stop("'x' must be a list with at least 2 elements")
if (!missing(g))
warning("'x' is a list, so ignoring argument 'g'")
if (!all(sapply(x, is.numeric)))
warning("some elements of 'x' are not numeric and will be coerced to numeric")
k <- length(x)
# Store length for each group
l <- lengths(x)
if (any(l == 0L))
stop("all groups must contain data")
# Create factor 'g' based on lengths of 'x'
g <- factor(rep.int(seq_len(k), l))
# Unlist 'x' to create a single numeric vector
x <- unlist(x)
}
else {
if (length(x) != length(g))
stop("'x' and 'g' must have the same length")
g <- factor(g)
# Determine the number of levels in 'g'
k <- nlevels(g)
# Check if there are at least 2 groups
if (k < 2L)
stop("all observations are in the same group")
}
# Determine the number of observations
n <- length(x)
if (n < 2L)
stop("not enough observations")
# Compute ranks of the observations
r <- rank(x)
# Count the number of ties
TIES <- table(x)
# Compute the Kruskal-Wallis test statistic
STATISTIC <- sum(tapply(r, g, sum)^2/tapply(r, g, length))
STATISTIC <- ((12 * STATISTIC/(n * (n + 1)) - 3 * (n + 1))/(1 -
sum(TIESˆ3 - TIES)/(nˆ3 - n)))
# Determine the degrees of freedom
PARAMETER <- k - 1L
# Compute the p-value
PVAL <- pchisq(STATISTIC, PARAMETER, lower.tail = FALSE)
names(STATISTIC) <- "Kruskal-Wallis chi-squared"
names(PARAMETER) <- "df"
# Create a list containing the test results
RVAL <- list(statistic = STATISTIC, parameter = PARAMETER,
p.value = PVAL, method = "Kruskal-Wallis rank sum test")
return(RVAL)
}
x_list <- list(
group1 = c(10, 15, 20),
group2 = c(8, 12, 16, 18),
group3 = c(5, 7, 9, 11, 14)
)
g_list <- factor(rep(names(x_list), sapply(x_list, length)))
x_vector <- c(10, 15, 20, 8, 12, 16, 18, 5, 7, 9, 11, 14)
g_vector <- factor(rep(1:3, c(3, 4, 5)))
result_list <- kwtest(x_list)
kwtest <- function (x, g, ...)
{
if (is.list(x)) {
if (length(x) < 2L)
stop("'x' must be a list with at least 2 elements")
if (!missing(g))
warning("'x' is a list, so ignoring argument 'g'")
if (!all(sapply(x, is.numeric)))
warning("some elements of 'x' are not numeric and will be coerced to numeric")
k <- length(x)
# Store length for each group
l <- lengths(x)
if (any(l == 0L))
stop("all groups must contain data")
# Create factor 'g' based on lengths of 'x'
g <- factor(rep.int(seq_len(k), l))
# Unlist 'x' to create a single numeric vector
x <- unlist(x)
}
else {
if (length(x) != length(g))
stop("'x' and 'g' must have the same length")
g <- factor(g)
# Determine the number of levels in 'g'
k <- nlevels(g)
# Check if there are at least 2 groups
if (k < 2L)
stop("all observations are in the same group")
}
# Determine the number of observations
n <- length(x)
if (n < 2L)
stop("not enough observations")
# Compute ranks of the observations
r <- rank(x)
# Count the number of ties
TIES <- table(x)
# Compute the Kruskal-Wallis test statistic
STATISTIC <- sum(tapply(r, g, sum)^2/tapply(r, g, length))
STATISTIC <- ((12 * STATISTIC/(n * (n + 1)) - 3 * (n + 1))/(1 -
sum(TIES^3 - TIES)/(nˆ3 - n)))
# Determine the degrees of freedom
PARAMETER <- k - 1L
# Compute the p-value
PVAL <- pchisq(STATISTIC, PARAMETER, lower.tail = FALSE)
names(STATISTIC) <- "Kruskal-Wallis chi-squared"
names(PARAMETER) <- "df"
# Create a list containing the test results
RVAL <- list(statistic = STATISTIC, parameter = PARAMETER,
p.value = PVAL, method = "Kruskal-Wallis rank sum test")
return(RVAL)
}
x_list <- list(
group1 = c(10, 15, 20),
group2 = c(8, 12, 16, 18),
group3 = c(5, 7, 9, 11, 14)
)
g_list <- factor(rep(names(x_list), sapply(x_list, length)))
x_vector <- c(10, 15, 20, 8, 12, 16, 18, 5, 7, 9, 11, 14)
g_vector <- factor(rep(1:3, c(3, 4, 5)))
result_list <- kwtest(x_list)
kwtest <- function (x, g, ...)
{
if (is.list(x)) {
if (length(x) < 2L)
stop("'x' must be a list with at least 2 elements")
if (!missing(g))
warning("'x' is a list, so ignoring argument 'g'")
if (!all(sapply(x, is.numeric)))
warning("some elements of 'x' are not numeric and will be coerced to numeric")
k <- length(x)
# Store length for each group
l <- lengths(x)
if (any(l == 0L))
stop("all groups must contain data")
# Create factor 'g' based on lengths of 'x'
g <- factor(rep.int(seq_len(k), l))
# Unlist 'x' to create a single numeric vector
x <- unlist(x)
}
else {
if (length(x) != length(g))
stop("'x' and 'g' must have the same length")
g <- factor(g)
# Determine the number of levels in 'g'
k <- nlevels(g)
# Check if there are at least 2 groups
if (k < 2L)
stop("all observations are in the same group")
}
# Determine the number of observations
n <- length(x)
if (n < 2L)
stop("not enough observations")
# Compute ranks of the observations
r <- rank(x)
# Count the number of ties
TIES <- table(x)
# Compute the Kruskal-Wallis test statistic
STATISTIC <- sum(tapply(r, g, sum)^2/tapply(r, g, length))
STATISTIC <- ((12 * STATISTIC/(n * (n + 1)) - 3 * (n + 1))/(1 -
sum(TIES^3 - TIES)/(n^3 - n)))
# Determine the degrees of freedom
PARAMETER <- k - 1L
# Compute the p-value
PVAL <- pchisq(STATISTIC, PARAMETER, lower.tail = FALSE)
names(STATISTIC) <- "Kruskal-Wallis chi-squared"
names(PARAMETER) <- "df"
# Create a list containing the test results
RVAL <- list(statistic = STATISTIC, parameter = PARAMETER,
p.value = PVAL, method = "Kruskal-Wallis rank sum test")
return(RVAL)
}
x_list <- list(
group1 = c(10, 15, 20),
group2 = c(8, 12, 16, 18),
group3 = c(5, 7, 9, 11, 14)
)
g_list <- factor(rep(names(x_list), sapply(x_list, length)))
x_vector <- c(10, 15, 20, 8, 12, 16, 18, 5, 7, 9, 11, 14)
g_vector <- factor(rep(1:3, c(3, 4, 5)))
result_list <- kwtest(x_list)
result_vector <- kwtest(x_vector, g_vector)
identical(result_list, result_vector)
set.seed(1234)
m <- 1000  # Number of repetitions
n <- 50    # Number of individuals per experiment
X <- matrix(rt(m * n, df = 10), nrow = m)
grp <- rep(1:3, c(20, 20, 10))
# Perform Kruskal-Wallis test
test_statistics <- perform_kruskal_wallis(X, grp)
